<div>Quicksort Review</div><div>&nbsp;&nbsp;-n*log(n) average &amp; best case</div><div>&nbsp;&nbsp;-~n comparisons per step</div><div>&nbsp;&nbsp;-if using median-of-three to find the pivot, random lists have the same performance as sorted lists</div><div>&nbsp;&nbsp;-if using choose-first-element to find the pivot, sorted lists operate in O(n^2), not n*log(n)</div><div><br></div><div>Mergesort</div><div>&nbsp;&nbsp;-runtime O(n*log(n))</div><div>&nbsp;&nbsp; &nbsp;-best &nbsp;case for (pre-merging) comparisons is n/2</div><div>&nbsp;&nbsp; &nbsp;-worst case for (pre-merging) comparisons is n-1</div><div>&nbsp;&nbsp; &nbsp;-either way, comparing before merging takes O(n) time</div><div>&nbsp;&nbsp; &nbsp;-another ~n comparisons when merging</div><div><br></div><div>Selection Sort</div><div>&nbsp;&nbsp;-uses findMin() to grab the current minimum and insert it into a new list</div><div>&nbsp;&nbsp; &nbsp; -repeat until finished</div><div>&nbsp;&nbsp;-runtime O(n^2)</div><div>&nbsp;</div><div>Counting Sort</div><div>&nbsp;&nbsp;-a type of bucket sort</div><div><br></div><div>Radix Sort</div><div>&nbsp;&nbsp;-runtime O(n)</div><div>&nbsp;&nbsp;-variant of bucket sort</div><div>&nbsp;&nbsp;-one data queue, a digit queue for each possible digit</div><div>&nbsp;&nbsp; &nbsp;-e.g. for sorting ints, we have one data queue and 10 digit queues</div><div>&nbsp;&nbsp;-distribute phase: pops digits from data queue into their appropriate digit queue</div><div>&nbsp;&nbsp; &nbsp;-each number goes into the digit queue that corresponds to that number's *least significant* digit</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-e.g. 187 goes into the 7 queue</div><div>&nbsp;&nbsp; &nbsp;-after this phase, the data queue is empty</div><div>&nbsp;&nbsp;-now we pop each number back into the data queue, starting from the lowest digit queue</div><div>&nbsp;&nbsp; &nbsp;-after this phase, the digit queues are empty</div><div>&nbsp;&nbsp;-repeat starting with the distribute phase, but pushing the numbers based on their tens digit</div><div>&nbsp;&nbsp;-then repeat based on their hundreds digit, etc.</div>
