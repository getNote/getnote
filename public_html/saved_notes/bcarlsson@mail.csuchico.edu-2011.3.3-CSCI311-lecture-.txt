<div>Hashing</div><div>&nbsp;&nbsp;-components:</div><div>&nbsp;&nbsp; &nbsp;1: hash table</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-contains either data or index</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-organized in "buckets"</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-e.g. bucket size = #elements/records that can fit in a bucket</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-viewed as an array/vector</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-hash table size should be prime</div><div>&nbsp;&nbsp; &nbsp;2: hash function</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-key is given to the hash function</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-key --&gt; h(key) --&gt; bucket# (address; which slot in the table to store the key or data element in)</div><div>&nbsp;&nbsp;-definitions:</div><div>&nbsp;&nbsp; &nbsp;-collision: &nbsp; multiple keys hash to same bucket</div><div>&nbsp;&nbsp; &nbsp;-load factor: # elements in table / tablesize</div><div><br></div><div>Example set:</div><div>&nbsp;&nbsp;4371, 1323, 6173, 4199, 4344, 9679, 1989</div><div>&nbsp;&nbsp;-hash table size, T, = 10</div><div>&nbsp;&nbsp;-h(x) = x % 10</div><div><br></div><div>&nbsp;&nbsp;-closed hashing</div><div>&nbsp;&nbsp; &nbsp;-hash table is an array (fixed capacity)</div><div>&nbsp;&nbsp; &nbsp;-average search length (ASL) = 13/7</div><div><br></div><div>&nbsp;&nbsp; &nbsp;-a: with linear probing (a collision resolution strategy)</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-if a collision happens, use the next empty bucket possible (counting up from the bucket where the collision occurred)</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-example:</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-4371 stored in bucket 1</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-1323 stored in bucket 3</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-6173 collides with bucket 3; stored in bucket 4</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-4199 stored in bucket 9</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-4344 collides with bucket 4; stored in bucket 5</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-9679 collides with bucket 9; stored in bucket 0</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-1989 collides with bucket 9; collides with bucket 0; collides with bucket 1; stored in bucket 2</div><div><br></div><div>&nbsp;&nbsp; &nbsp;-b: with quadratic probing</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-if a collision happens, use the bucket i^2 away (higher) from the bucket where the collision occurred</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-aka (h(x) + i^2) % bucketsize</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-i = collision resolution attempt #, starting from 1, for THIS element. i resets to 1 for every successful insert into the hash table.</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-example:</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-4371 stored in bucket 1</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-1323 stored in bucket 3</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-6173 collides with bucket 3; stored in bucket 3 + 1^2 = bucket 4</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-4199 stored in bucket 9</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-4344 collides with bucket 4; stored in bucket 4 + 1^2 = bucket 5</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-9679 collides with bucket 9; stored in bucket 9 + 1^2 = bucket 0</div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;-1989 collides with bucket 9; collides with bucket 9 + 1^2 = bucket 0; collides with bucket 9 + 2^2 = bucket 4; stored in bucket 9 + 3^2 = bucket 8</div><div><br></div><div>&nbsp;&nbsp; &nbsp;-c: rehashing</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-if a collision happens, transfer contents to a larger table</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-multiply current table size by 2 and get the next largest prime; this is our new table size</div><div><br></div><div>&nbsp;&nbsp;-open hashing</div><div>&nbsp;&nbsp; &nbsp;-table is array of pointers to linked structures</div><div>&nbsp;&nbsp; &nbsp;-aka chaining</div><div>&nbsp;&nbsp; &nbsp;-buckets can hold unlimited # elements</div><div>&nbsp;&nbsp; &nbsp;-example:</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-4371 stored in bucket 1</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-1323 stored in bucket 3</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-6173 stored in bucket 3</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-4199 stored in bucket 9</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-4344 stored in bucket 4</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-9679 stored in bucket 9</div><div>&nbsp;&nbsp; &nbsp; &nbsp;-1989 stored in bucket 9</div><div>&nbsp;&nbsp; &nbsp;-average search length (ASL) = 11/7</div>
